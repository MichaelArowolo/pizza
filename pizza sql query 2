#SQL ASSIGNMENT

#1. Retrieve the top 3 pizzas (Pizza_Sold) based on the total revenue generated,
# Include the pizza name, total revenue, and the sales target.

select sales_table.Pizza_Sold, sum(sales_table.revenue) total_revenue, Sales_Target.Sales_Target 
from sales_table join sales_target 
on sales_table.Pizza_Sold=Sales_Target.Pizza 
group by sales_table.Pizza_Sold, Sales_Target.Sales_Target
order by sum(sales_table.revenue) desc
limit 3 ;


#2. Compare the total revenue generated for each type of pizza (Pizza_Sold) across all branches.
# Display the pizza name, total revenue, and the average revenue for each pizza.

select Pizza_Sold, sum(revenue) total_revenue, avg(revenue) average_revenue 
from sales_table
group by Pizza_Sold;

 #3. Identify pizzas (Pizza_Sold) that are below the average sales target and
# have generated revenue less than the overall average revenue.

select sales_table.Pizza_Sold, sum(sales_table.revenue)
from sales_table join sales_target 
on sales_table.Pizza_Sold=Sales_Target.Pizza
group by sales_table.Pizza_Sold
having sum(sales_table.revenue)<(select avg(Sales_Target) from sales_target) 
and  sum(sales_table.revenue)<(select avg(revenue) from sales_table) ;


# 4. Find pizzas (Pizza_Sold) that have a price higher than the overall average price 
# and a sales target greater than the overall average target. Exclude the 'Ikoyi' branch.

select sales_table.Pizza_Sold
from sales_table join sales_target 
on sales_table.Pizza_Sold=Sales_Target.Pizza
where  Branch<> "ikoyi" 
and sales_target.Sales_Target>(select avg(Sales_Target) from sales_target where  Branch<> "ikoyi" )
and sales_table.Price>(select avg(Price) from sales_table where  Branch<> "ikoyi" )
group by sales_table.Pizza_Sold;

#5. Determine the top-performing pizza (Pizza_Sold) in each branch based on total revenue. 
# Display the branch, pizza name, and total revenue for each top performer.

# this was a step in answering no.5
select branch, Pizza_Sold, sum(revenue) total_revenue,  RANK() OVER (PARTITION BY branch ORDER BY SUM(revenue) DESC) AS sales_rank
from sales_table
group by Branch, Pizza_Sold;

select branch, Pizza_name, total_revenue
from 
(select branch, Pizza_Sold pizza_name, sum(revenue) total_revenue,  RANK() OVER (PARTITION BY branch ORDER BY SUM(revenue) DESC) AS sales_rank
from sales_table
group by Branch, Pizza_Sold
) as ranked_pizza
where sales_rank=1
order by total_revenue desc, branch;


# 6. Retrieve the daily revenue, the daily sales target, and the variance between 
# the revenue and target for each day. Include the date and the calculated variance.

select b.date, sum(b.revenue) sum_of_daily_sales, a.Target, sum(b.revenue) - a.Target as variance
from daily_sales_target a
join sales_table b
on a.day=b.date
group by b.Date, a.Target;

#7. Find the days where the total revenue exceeds the daily sales target. 
# Include the date, total revenue, and daily sales target for each exceeding day.

select b.date, sum(b.revenue) sum_of_daily_sales, a.Target
from daily_sales_target a
join sales_table b
on a.day=b.date
group by b.Date, a.Target
having sum(b.revenue) > a.Target;

# 8. Calculate the average daily revenue and identify days where the revenue is above the average. 
# Display the date, total revenue, and daily sales target for each above-average day


select a.date, sum(a.revenue), b.Target
from sales_table a
join daily_sales_target b
on a.date=b.Day
group by a.date, b.Target
having sum(a.revenue)>(select avg(rev) from (select sum(a.revenue) rev
from sales_table a join daily_sales_target b on a.date=b.day
group by a.date) as avg_revenue);

# 9. List the days where the total revenue falls below the daily sales target.
# Include the date, total revenue, and daily sales target
select b.date, sum(b.revenue) sum_of_daily_sales, a.Target
from daily_sales_target a
join sales_table b
on a.day=b.date
group by b.Date, a.Target
having sum_of_daily_sales<a.Target ;
